from langchain.prompts.chat import (
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
)
from langchain_core.prompts import (
    ChatPromptTemplate,
    FewShotChatMessagePromptTemplate,
)
from langchain_core.prompts.prompt import PromptTemplate
from langchain_core.prompts.few_shot import FewShotPromptTemplate

class TaskPromptSetup:
    def __init__(
        self, 
        task_name="", 
        system_template_string='''{thoughts}''', 
        human_template_string="", 
        few_shot_examples=[]
    ):
        self.task_name = task_name
        self.system_template_string = system_template_string
        self.human_template_string = human_template_string
        self.few_shot_examples = few_shot_examples
        
    def get_system_template(
        self, 
        question="Where do rabbits go to eat?",
        thoughts=""
        ):
        system_template_string = self.system_template_string
        
        return system_template_string.format(
            question=question,
            thoughts=thoughts
        )
        
    def get_few_shot_prompt(self, format_instructions=None):
        prompt = ChatPromptTemplate.from_messages(
            [
                ("human", "{question}"),
                ("system", "{thought}\n\n"),
            ]
        )
        few_shot_prompt = FewShotChatMessagePromptTemplate(
            example_prompt=prompt,
            examples=self.few_shot_examples,
            partial_variables={"format_instructions": format_instructions},
        )
        return few_shot_prompt
    
    def get_custom_few_shot_prompt(
        self, 
        question="What is your name?",
        thoughts=[""], 
        prefix="[INST]", 
        suffix="[/INST]",
        system_template_string='''{thoughts}''',
    ):
        thoughts = "\n".join(thoughts) #join all thoughts together
        system_template = self.get_system_template(
            question=question,
            thoughts=thoughts
        )
        
        few_shot_prompt = self.get_few_shot_prompt()
        few_shot_prompt_string = few_shot_prompt.format()
        
        tail_prompt = '''\nGive me a new thought (System) to answer this question (Human):\n\nHuman: {question}\nSystem: {suffix}'''.format(question=question, suffix=suffix)
        
        return prefix + system_template + few_shot_prompt_string + tail_prompt
    
    def get_chat_few_shot_task_propose_prompt(self, query):
        from langchain.output_parsers import ResponseSchema, StructuredOutputParser

        response_schemas = [
            ResponseSchema(name="Human", description="Question to be answered."),
            ResponseSchema(
                name="System",
                description="Thought generated by the system",
            ),
        ]
        output_parser = StructuredOutputParser.from_response_schemas(response_schemas)
        format_instructions = output_parser.get_format_instructions()
        
        few_shot_prompt = self.get_few_shot_prompt(format_instructions=format_instructions)

        combined_prompt = ChatPromptTemplate.from_messages(
            [
                ("system", self.system_template),
                few_shot_prompt,
                ("human", "{input}"),
            ]
        )

        prompt = combined_prompt.format(input=query)
        return prompt
    
    def get_value_prompt(self, template='''{question}\n{thought}''', question="", thought=""):
        """
        Score the generated thought using prompt from this method.
        """
        return template.format(question=question, thought=thought)
    
    def get_final_answer_prompt(self, template='''{question}\n{thoughts}\n{answer_options}''', question="", thoughts=[""], answer_options=""):
        """
        Score the generated thought using prompt from this method.
        """
        thoughts = "\n".join(thoughts)
        return template.format(question=question, thoughts=thoughts, answer_options=answer_options)
        
        
